{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-ff361b296e0b0884b345d7c9a4a02b76497ff723",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/SimpleMarketPlace.sol": "project/contracts/SimpleMarketPlace.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/SimpleMarketPlace.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.20;\n\ncontract SimpleMarketplace {\n    struct Purchase {\n        uint itemId;\n        string itemName;\n        uint price;\n        address buyer;\n    }\n\n    Purchase[] public purchases;\n\n    event ItemBought(uint indexed itemId, string itemName, address indexed buyer, uint price);\n\n    // Buy an item (frontend passes itemId, name, price)\n    function buyItem(uint _itemId, string calldata _itemName) external payable {\n        require(msg.value > 0, \"Must send ETH to buy item\");\n\n        purchases.push(Purchase({\n            itemId: _itemId,\n            itemName: _itemName,\n            price: msg.value,\n            buyer: msg.sender\n        }));\n\n        emit ItemBought(_itemId, _itemName, msg.sender, msg.value);\n    }\n\n    // Get all purchases\n    function getPurchases() external view returns (Purchase[] memory) {\n        return purchases;\n    }\n}"
      }
    }
  }
}