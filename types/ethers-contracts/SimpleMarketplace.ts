/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumberish, BytesLike, FunctionFragment, Result, Interface, EventFragment, AddressLike, ContractRunner, ContractMethod, Listener } from "ethers"
import type { TypedContractEvent, TypedDeferredTopicFilter, TypedEventLog, TypedLogDescription, TypedListener, TypedContractMethod } from "./common.js"
  
export declare namespace SimpleMarketplace {
      
    export type PurchaseStruct = {itemId: BigNumberish, itemName: string, price: BigNumberish, buyer: AddressLike}

    export type PurchaseStructOutput = [itemId: bigint, itemName: string, price: bigint, buyer: string] & {itemId: bigint, itemName: string, price: bigint, buyer: string }
  
    }

  export interface SimpleMarketplaceInterface extends Interface {
    getFunction(nameOrSignature: "buyItem" | "getPurchases" | "purchases"): FunctionFragment;

    getEvent(nameOrSignatureOrTopic: "ItemBought"): EventFragment;

    encodeFunctionData(functionFragment: 'buyItem', values: [BigNumberish, string]): string;
encodeFunctionData(functionFragment: 'getPurchases', values?: undefined): string;
encodeFunctionData(functionFragment: 'purchases', values: [BigNumberish]): string;

    decodeFunctionResult(functionFragment: 'buyItem', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'getPurchases', data: BytesLike): Result;
decodeFunctionResult(functionFragment: 'purchases', data: BytesLike): Result;
  }

  
    export namespace ItemBoughtEvent {
      export type InputTuple = [itemId: BigNumberish, itemName: string, buyer: AddressLike, price: BigNumberish];
      export type OutputTuple = [itemId: bigint, itemName: string, buyer: string, price: bigint];
      export interface OutputObject {itemId: bigint, itemName: string, buyer: string, price: bigint };
      export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>
      export type Filter = TypedDeferredTopicFilter<Event>
      export type Log = TypedEventLog<Event>
      export type LogDescription = TypedLogDescription<Event>
    }

  

  export interface SimpleMarketplace extends BaseContract {
    
    connect(runner?: ContractRunner | null): SimpleMarketplace;
    waitForDeployment(): Promise<this>;

    interface: SimpleMarketplaceInterface;

    
  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEventLog<TCEvent>>>
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  on<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>
  
  once<TCEvent extends TypedContractEvent>(event: TCEvent, listener: TypedListener<TCEvent>): Promise<this>
  once<TCEvent extends TypedContractEvent>(filter: TypedDeferredTopicFilter<TCEvent>, listener: TypedListener<TCEvent>): Promise<this>

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>
  removeAllListeners<TCEvent extends TypedContractEvent>(event?: TCEvent): Promise<this>


    
    
    buyItem: TypedContractMethod<
      [_itemId: BigNumberish, _itemName: string, ],
      [void],
      'payable'
    >
    

    
    getPurchases: TypedContractMethod<
      [],
      [SimpleMarketplace.PurchaseStructOutput[]],
      'view'
    >
    

    
    purchases: TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string] & {itemId: bigint, itemName: string, price: bigint, buyer: string }],
      'view'
    >
    


    getFunction<T extends ContractMethod = ContractMethod>(key: string | FunctionFragment): T;

    getFunction(nameOrSignature: 'buyItem'): TypedContractMethod<
      [_itemId: BigNumberish, _itemName: string, ],
      [void],
      'payable'
    >;
getFunction(nameOrSignature: 'getPurchases'): TypedContractMethod<
      [],
      [SimpleMarketplace.PurchaseStructOutput[]],
      'view'
    >;
getFunction(nameOrSignature: 'purchases'): TypedContractMethod<
      [arg0: BigNumberish, ],
      [[bigint, string, bigint, string] & {itemId: bigint, itemName: string, price: bigint, buyer: string }],
      'view'
    >;

    getEvent(key: 'ItemBought'): TypedContractEvent<ItemBoughtEvent.InputTuple, ItemBoughtEvent.OutputTuple, ItemBoughtEvent.OutputObject>;

    filters: {
      
      'ItemBought(uint256,string,address,uint256)': TypedContractEvent<ItemBoughtEvent.InputTuple, ItemBoughtEvent.OutputTuple, ItemBoughtEvent.OutputObject>;
      ItemBought: TypedContractEvent<ItemBoughtEvent.InputTuple, ItemBoughtEvent.OutputTuple, ItemBoughtEvent.OutputObject>;
    
    };
  }